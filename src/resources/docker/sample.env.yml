# .env.yml
## environment file to custmise
files:
  docker-compose.yml: |
    version: "2"

    services:
      site:
          build: ./apache/
          ports:
            - "${VIRTUAL_PORT}:80"
          links:
              - php
          external_links:
              - proxy:dockergen
          volumes_from:
              - app
          volumes:
              - ./apache/logs:/var/log/apache2
          environment:
              - "DOCKER_MACHINE_IP=${DOCKER_MACHINE_IP}"
          env_file:
              - ./env/web.env
              - ./env/db.env

      mysql:
          build: ./db/
          volumes_from:
              - data
          env_file:
              - ./env/db.env

      frontend:
          build: ./frontend/
          volumes_from:
              - app

      php:
          build: ./php/
          expose:
              - 9000
          links:
              - mysql
          volumes_from:
              - app
          env_file:
              - ./env/db.env
              - ./env/ss.env
              - ./env/web.env

      composer:
          build: ./composer/
          volumes:
              - ~/.composer:/var/www/composer
              - ~/.ssh:/var/www/.ssh
              - ~/.netrc:/root/.netrc
              - ./site:/var/www/html

      solr:
          build: ./solr/
          ports:
              - "${SOLR_PORT}:8983"
          volumes_from:
              - app

      app:
          image: php:5.6-fpm
          volumes:
              - ./site:/var/www/html
              - ./php/mail:/var/www/mail
              - ./solr/myindex:/var/www/solr
          command: "true"
          tty: true

      data:
          image: mariadb:10.1
          volumes:
              - /var/lib/mysql
          command: "true"

  start: |
    #!/bin/bash

    export DOCKER_MACHINE_IP=$(docker-machine ip default) &&
    export $(grep "^[^#]" env/web.env | xargs) &&
    docker-compose ${1:-up -d}
containers:
  db:
    DockerFile: |
      FROM mariadb:10.1

      MAINTAINER Mohamed Alsharaf <mohamed.alsharaf@gmail.com>

      # see https://github.com/dockerfile/mariadb/issues/3
      RUN echo -e "\nexport TERM=xterm" >> ~/.bashrc

  env:
    db.env: |
      MYSQL_ROOT_PASSWORD=secret
      MYSQL_USER=project
      MYSQL_DATABASE=project
      MYSQL_PASSWORD=project

    ss.env: |
      REPOSITORY={repository}
      BRANCH={branch}

    web.env: |
      VIRTUAL_HOST={virtual_host}
      VIRTUAL_PORT={virtual_port}
      SOLR_PORT={solr_port}
  apache:
    logs: ~folder~
    httpd.conf: |
      ServerRoot "/usr/local/apache2"
      Listen 80

      LoadModule authn_file_module modules/mod_authn_file.so
      LoadModule authn_core_module modules/mod_authn_core.so
      LoadModule authz_host_module modules/mod_authz_host.so
      LoadModule authz_groupfile_module modules/mod_authz_groupfile.so
      LoadModule authz_user_module modules/mod_authz_user.so
      LoadModule authz_core_module modules/mod_authz_core.so
      LoadModule access_compat_module modules/mod_access_compat.so
      LoadModule auth_basic_module modules/mod_auth_basic.so
      LoadModule reqtimeout_module modules/mod_reqtimeout.so
      LoadModule filter_module modules/mod_filter.so
      LoadModule mime_module modules/mod_mime.so
      LoadModule log_config_module modules/mod_log_config.so
      LoadModule env_module modules/mod_env.so
      LoadModule expires_module modules/mod_expires.so
      LoadModule headers_module modules/mod_headers.so
      LoadModule setenvif_module modules/mod_setenvif.so
      LoadModule version_module modules/mod_version.so
      LoadModule proxy_module modules/mod_proxy.so
      LoadModule proxy_fcgi_module modules/mod_proxy_fcgi.so
      LoadModule unixd_module modules/mod_unixd.so
      LoadModule status_module modules/mod_status.so
      LoadModule autoindex_module modules/mod_autoindex.so
      LoadModule vhost_alias_module modules/mod_vhost_alias.so
      LoadModule dir_module modules/mod_dir.so
      LoadModule actions_module modules/mod_actions.so
      LoadModule alias_module modules/mod_alias.so
      LoadModule rewrite_module modules/mod_rewrite.so

      <IfModule unixd_module>
      User daemon
      Group daemon
      </IfModule>

      ServerAdmin you@example.com
      ServerName localhost
      <Directory />
          AllowOverride All
          Require all denied
      </Directory>

      DocumentRoot "/var/www/html/public"
      <Directory "/var/www/html/public">
          Options Indexes FollowSymLinks
          AllowOverride All
          Require all granted
      </Directory>

      <IfModule dir_module>
          DirectoryIndex index.html index.php
      </IfModule>

      <Files ".ht*">
          Require all denied
      </Files>

      ErrorLog /proc/self/fd/2
      LogLevel warn

      <IfModule log_config_module>
          LogFormat "%h %l %u %t \"%r\" %>s %b \"%{Referer}i\" \"%{User-Agent}i\"" combined
          LogFormat "%h %l %u %t \"%r\" %>s %b" common

          <IfModule logio_module>
            LogFormat "%h %l %u %t \"%r\" %>s %b \"%{Referer}i\" \"%{User-Agent}i\" %I %O" combinedio
          </IfModule>

          CustomLog /proc/self/fd/1 common
      </IfModule>

      <IfModule alias_module>
          ScriptAlias /cgi-bin/ "/usr/local/apache2/cgi-bin/"
      </IfModule>

      <Directory "/usr/local/apache2/cgi-bin">
          AllowOverride None
          Options None
          Require all granted
      </Directory>

      <IfModule mime_module>
          TypesConfig conf/mime.types
          AddType application/x-compress .Z
          AddType application/x-gzip .gz .tgz
      </IfModule>

      <VirtualHost *:80>
              ServerAdmin webmaster@localhost
              DocumentRoot /var/www/html/public
              ServerName localhost

              <Directory /var/www/html/public>
                      Options All
                      AllowOverride All
                      Require all granted
                      DirectoryIndex index.html index.php
              </Directory>

              <FilesMatch \.php$>
                  SetHandler "proxy:fcgi://php:9000"
              </FilesMatch>

              ErrorLog /var/log/apache2/error.log
              LogLevel warn
              CustomLog /var/log/apache2/access.log combined
      </VirtualHost>

      <IfModule proxy_html_module>
      Include conf/extra/proxy-html.conf
      </IfModule>

      <IfModule ssl_module>
      SSLRandomSeed startup builtin
      SSLRandomSeed connect builtin
      </IfModule>

    DockerFile: |
      FROM httpd:2.4

      MAINTAINER Mohamed Alsharaf <mohamed.alsharaf@gmail.com>

      COPY ./httpd.conf /usr/local/apache2/conf/httpd.conf

      RUN mkdir -p /var/www/html/public

      ENV LANG en_US.UTF-8

      WORKDIR /var/www/html/public

  php:
    mail: ~folder~
    templates: ~folder~
    templates/netrc.tmpl: |
      machine gitlab.cwp.govt.nz
      login uservalue
      password passvalue

    templates/sendmail: |
      #!/usr/local/bin/php
      <?php

      # Create a filename
      list($ms, $time) = explode(' ', microtime());
      $logfile = '/var/www/mail/' . date('Y-m-d h.i.s,', $time) . substr($ms, 2, 3) . '.eml';

      # Write the email contents to the file
      $emailContent = fopen('php://stdin', 'r');
      file_put_contents($logfile, $emailContent);

    DockerFile: |
      FROM php:5.6-fpm

        MAINTAINER Mohamed Alsharaf <mohamed.alsharaf@gmail.com>

        # Install needed libraries
        RUN apt-get update
        RUN apt-get install -y libmcrypt-dev
        RUN apt-get install -y libtidy-dev
        RUN apt-get install -y libpng12-dev
        RUN apt-get install -y libjpeg-dev
        RUN apt-get install -y libfreetype6-dev
        RUN apt-get install -y git-core

        # configure extensions
        RUN docker-php-ext-configure gd --with-freetype-dir=/usr/include/ --with-jpeg-dir=/usr/include/

        # PHP extensions
        RUN docker-php-ext-install mbstring
        RUN docker-php-ext-install mysqli
        RUN docker-php-ext-install mcrypt
        RUN docker-php-ext-install tidy
        RUN docker-php-ext-install gd
        RUN docker-php-ext-install pdo
        RUN docker-php-ext-install pdo_mysql
        RUN docker-php-ext-install zip

        # PHP configs
        RUN echo "date.timezone = Pacific/Auckland" > /usr/local/etc/php/conf.d/timezone.ini
        RUN echo "display_startup_errors=on\nerror_reporting=ALL\ndisplay_errors =on" > /usr/local/etc/php/conf.d/error_reporting.ini
        RUN echo "upload_max_filesize = 5M\n" > /usr/local/etc/php/conf.d/max-upload.ini

        # Install wkhtmltopdf
        #RUN apt-get install -y gdebi
        #RUN curl -O http://download.gna.org/wkhtmltopdf/0.12/0.12.2.1/wkhtmltox-0.12.2.1_linux-jessie-amd64.deb
        #RUN gdebi --n wkhtmltox-0.12.2.1_linux-jessie-amd64.deb
        #RUN rm wkhtmltox-0.12.2.1_linux-jessie-amd64.deb

        # Tell PHP to log emails
        COPY templates/sendmail /var/www/sendmail
        RUN echo 'sendmail_path = /usr/local/bin/php /var/www/sendmail' > /usr/local/etc/php/conf.d/mailcatcher.ini
        RUN chmod +x /var/www/sendmail
        RUN mkdir /var/www/mail

        # To grant permissions to www-data
        RUN usermod -u 1000 www-data

        COPY templates/netrc.tmpl /root/.netrc

        WORKDIR /var/www/html/public

  composer:
    DockerFile: |
      FROM composer/composer:php5

      MAINTAINER Mohamed Alsharaf <mohamed.alsharaf@gmail.com>

      WORKDIR /var/www/html/public

  site:
    public: ~folder~
    _ss_environment.php: |
      <?php

      if (!isset($_SERVER['HTTP_HOST'])) {
          $_SERVER['HTTP_HOST']       = '127.0.0.1';
          $_SERVER['SERVER_PROTOCOL'] = 'HTTP/1.1';
          $_SERVER['REQUEST_METHOD']  = 'GET';
      }

      define('SS_ENVIRONMENT_TYPE', 'dev'); // dev, test, live

      define('SS_DATABASE_CLASS', 'MySQLPDODatabase');
      define('SS_DATABASE_SERVER', 'mysql');
      define('SS_DATABASE_USERNAME', getenv('MYSQL_USER'));
      define('SS_DATABASE_PASSWORD', getenv('MYSQL_PASSWORD'));
      define('SS_DATABASE_NAME', getenv('MYSQL_DATABASE'));

      define('SS_DEFAULT_ADMIN_USERNAME', 'admin');
      define('SS_DEFAULT_ADMIN_PASSWORD', 'admin');

      define('SOLR_SERVER', getenv('DOCKER_MACHINE_IP'));
      define('SOLR_PORT', getenv('SOLR_PORT'));
      define('SOLR_MODE', 'file');
      define('SOLR_PATH', '/solr/');
      define('SOLR_REMOTEPATH', '/solr/');
      define('SOLR_USER', '');
      define('SOLR_INDEXSTORE_PATH', '/var/www/solr');

      //define('WKHTMLTOPDF_BINARY', '/usr/local/bin/wkhtmltopdf');

      date_default_timezone_set('Pacific/Auckland');

      global $_FILE_TO_URL_MAPPING;
      $_FILE_TO_URL_MAPPING['/var/www/html/public'] = 'http://localhost:' . getenv('VIRTUAL_PORT');

  solr:
      myindex: ~folder~
      DockerFile: |
        # Solr 4.x required for silverstripe
        FROM makuk66/docker-solr:4.10.4

        MAINTAINER Mohamed Alsharaf <mohamed.alsharaf@gmail.com>

        # Change as needed to set max and min memory
        ENV SOLR_HEAP=512m

        # To be able to access index folder
        USER root

  frontend:
      build: |
        #!/bin/bash

        ./start "run  --rm -w /var/www/html/public/themes/$1 frontend npm run build"

      DockerFile: |
        FROM node:6.3

        RUN npm install -g nodemon
        RUN npm install -g node-sass
        RUN npm install -g uglify-js
        RUN npm install -g parallelshell

        ENV LANG en_US.UTF-8

        RUN npm install

        RUN npm rebuild node-sass

permissions:
  start: a+x
  php/templates/sendmail: a+x
  frontend/build: a+x
